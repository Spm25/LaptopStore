@model LaptopStore.Models.OrderDetail
@inject LaptopStore.Data.ApplicationDbContext _context

@{
    ViewData["Title"] = "Chỉnh sửa chi tiết đơn hàng";
}

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">Chỉnh sửa thông tin chi tiết đơn hàng</h3>
    </div>

    <form asp-action="Edit">
        <div class="card-body">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="OrderDetailID" />
            <input type="hidden" asp-for="OrderID" /> @* Giữ OrderID là hidden field để submit form *@

            @* Hiển thị OrderID dưới dạng readonly text *@
            <div class="form-group">
                <label>Đơn hàng số:</label>
                <input type="text" class="form-control" value="@Model.OrderID" readonly />
            </div>

            <div class="form-group">
                <label asp-for="ProductType">Loại sản phẩm</label>
                <select asp-for="ProductType" class="form-control" asp-items="ViewBag.ProductType" id="ProductType"></select>
                <span asp-validation-for="ProductType" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ProductID">Sản phẩm</label>
                <select asp-for="ProductID" class="form-control" id="productDropdown">
                    <option value="">-- Chọn sản phẩm --</option>
                </select>
                <span asp-validation-for="ProductID" class="text-danger"></span>
            </div>

            <div class="form-row">
                <div class="form-group col-md-6">
                    <label asp-for="Quantity">Số lượng</label>
                    <input asp-for="Quantity" class="form-control" type="number" min="1" />
                    <small class="form-text text-muted">Số lượng tối đa: <span id="maxQuantityDisplay">1</span></small>
                    <span asp-validation-for="Quantity" class="text-danger"></span>
                </div>

                <div class="form-group col-md-6">
                    <label asp-for="UnitPrice">Đơn giá</label>
                    <input asp-for="UnitPrice" class="form-control" />
                    <span asp-validation-for="UnitPrice" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="WarrantyPeriod">Thời gian bảo hành (tháng)</label>
                <input asp-for="WarrantyPeriod" class="form-control" type="number" min="0" />
                <span asp-validation-for="WarrantyPeriod" class="text-danger"></span>
            </div>
        </div>

        <div class="card-footer">
            <button type="submit" class="btn btn-primary">Lưu</button>
            <a asp-controller="Orders" asp-action="Details" asp-route-id="@Model.OrderID" class="btn btn-secondary">Hủy</a>
        </div>
    </form>

</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const productTypeDropdown = $('#ProductType');
            const productDropdown = $('#productDropdown');
            const quantityInput = $('#Quantity');
            const maxQuantityDisplay = $('#maxQuantityDisplay');

            // Hàm tải sản phẩm dựa trên loại sản phẩm
            function loadProductsByType(selectedType, selectedProductId = null, initialQuantity = 1) {
                productDropdown.empty().append('<option>Đang tải...</option>');

                $.ajax({
                    url: '/OrderDetails/GetProductsByType',
                    type: 'GET',
                    data: { type: selectedType },
                    success: function (data) {
                        productDropdown.empty();
                        productDropdown.append('<option value="">-- Chọn sản phẩm --</option>');
                        let foundInitialProduct = false;

                        $.each(data, function (index, item) {
                            const option = $('<option>', {
                                value: item.value,
                                text: item.text,
                                'data-quantity': item.quantity
                            });
                            if (selectedProductId && item.value == selectedProductId) {
                                option.attr('selected', 'selected');
                                foundInitialProduct = true;
                            }
                            productDropdown.append(option);
                        });

                        // Nếu không tìm thấy sản phẩm ban đầu (ví dụ: đã bán hết), chọn lại option mặc định
                        if (selectedProductId && !foundInitialProduct) {
                            productDropdown.val('');
                            quantityInput.attr('max', 1).val(1);
                            maxQuantityDisplay.text(1);
                        } else if (selectedProductId) {
                            // Sau khi load xong, nếu có sản phẩm được chọn từ ban đầu, cập nhật số lượng
                            const currentSelectedProduct = productDropdown.find('option:selected');
                            const newMaxQuantity = currentSelectedProduct.data('quantity');
                            quantityInput.attr('max', newMaxQuantity).val(initialQuantity);
                            maxQuantityDisplay.text(newMaxQuantity);
                        } else {
                            // Nếu không có sản phẩm được chọn sẵn, reset quantity
                            quantityInput.attr('max', 1).val(1);
                            maxQuantityDisplay.text(1);
                        }
                    },
                    error: function () {
                        productDropdown.empty();
                        productDropdown.append('<option value="">Không thể tải sản phẩm</option>');
                        quantityInput.attr('max', 1).val(1);
                        maxQuantityDisplay.text(1);
                    }
                });
            }

            // Xử lý khi thay đổi loại sản phẩm
            productTypeDropdown.change(function () {
                const selectedType = $(this).val();
                loadProductsByType(selectedType);
            });

            // Xử lý khi chọn sản phẩm cụ thể
            productDropdown.change(function () {
                const selectedProduct = $(this).find('option:selected');
                const maxQuantity = selectedProduct.data('quantity') || 1;

                quantityInput.attr({
                    'max': maxQuantity,
                    'min': 1
                }).val(1); // Reset về 1 khi chọn sản phẩm mới

                maxQuantityDisplay.text(maxQuantity);
            });

            // Khi trang Edit tải lần đầu:
            // 1. Chọn loại sản phẩm ban đầu
            const initialProductType = productTypeDropdown.val();
            const initialProductId = '@Model.ProductID'; // Lấy ProductID hiện tại từ Model
            const initialQuantity = '@Model.Quantity'; // Lấy Quantity hiện tại từ Model

            if (initialProductType) {
                // Tải sản phẩm dựa trên loại sản phẩm đã chọn và chọn sản phẩm hiện tại
                loadProductsByType(initialProductType, initialProductId, initialQuantity);
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}